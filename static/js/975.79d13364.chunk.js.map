{"version":3,"file":"static/js/975.79d13364.chunk.js","mappings":"gPAAO,IAAMA,EAAW,mCACXC,EACX,qFACWC,EAAc,mCACdC,EAAU,kC,iLCFVC,EAAYC,EAAAA,GAAAA,GAAH,8DAKTC,EAAkBD,EAAAA,GAAAA,OAAH,yCAIfE,EAAeF,EAAAA,GAAAA,GAAH,yEAKZG,EAAcH,EAAAA,GAAAA,EAAH,+C,SCiDxB,EA1DgB,WACd,OAA4BI,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAeR,OAbAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAEyBC,EAAAA,EAAAA,IAAkBH,GAF3C,OAEUI,EAFV,OAGIL,EAAUK,GAHd,gDAKIC,QAAQC,IAAR,MALJ,0DADc,uBAAC,WAAD,wBASdC,EACD,GAAE,CAACP,IACJK,QAAQC,IAAIR,IAGV,SAACU,EAAA,EAAD,CAAKC,GAAG,OAAOC,GAAG,OAAlB,UACE,SAAClB,EAAD,UACGM,EAAOa,OAAS,EACfb,EAAOc,MAAM,EAAG,GAAGC,KAAI,YAAsC,IAAnCC,EAAkC,EAAlCA,GAAIC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,IAChD,OACE,2BACE,UAACtB,EAAD,eAAgBqB,MAChB,UAACpB,EAAD,4BAA4BmB,EAAaH,MAAM,EAAG,QAElD,SAAClB,EAAD,CACEwB,MAAM,MACNC,OAAO,MACPC,IAAK,iCAAmCH,EACxCI,MAAM,uBACNC,iBAAe,EACfC,MAAM,2FACNC,SAAO,MAXFV,EA2BZ,KAED,gEAKT,C,8OC5DDW,IAAAA,SAAAA,QAAA,gCAEO,IAAMC,EAAmB,mCAAG,6GAERD,IAAAA,IAAA,sCAAyClC,EAAAA,KAFjC,cAEzBoC,EAFyB,yBAGxBA,EAASC,KAAKC,SAHU,gCAK/BxB,QAAQC,IAAR,MAL+B,yDAAH,qDASnBwB,EAAiB,mCAAG,WAAMC,GAAN,gGAENN,IAAAA,IAAU,eAAgB,CAC/CO,OAAQ,CACNC,QAAS1C,EAAAA,GACTwC,MAAOA,EACPG,SAAU,UACVC,KAAM,EACNC,eAAe,KARU,cAEvBT,EAFuB,yBAkBtBA,EAASC,KAAKC,SAlBQ,gCAoB7BxB,QAAQC,IAAR,MApB6B,yDAAH,sDAwBjB+B,EAAc,mCAAG,WAAMrC,GAAN,gGAEHyB,IAAAA,IAAA,gBACZzB,EADY,oBACOT,EAAAA,GADP,oBAFG,cAEpBoC,EAFoB,yBAKnBA,EAASC,MALU,gCAO1BvB,QAAQC,IAAR,MAP0B,yDAAH,sDAWdgC,EAAc,mCAAG,WAAMtC,GAAN,gGAEHyB,IAAAA,IAAA,gBACZzB,EADY,4BACeT,EAAAA,GADf,oBAFG,cAEpBoC,EAFoB,yBAKnBA,EAASC,KAAKW,MALK,gCAO1BlC,QAAQC,IAAR,MAP0B,yDAAH,sDAWdkC,EAAiB,mCAAG,WAAMxC,GAAN,gGAENyB,IAAAA,IAAA,gBACZzB,EADY,4BACeT,EAAAA,GADf,2BAFM,cAEvBoC,EAFuB,yBAKtBA,EAASC,KAAKC,SALQ,gCAO7BxB,QAAQC,IAAR,MAP6B,yDAAH,sDAUjBH,EAAiB,mCAAG,WAAMH,GAAN,gGAENyB,IAAAA,IAAA,gBACZzB,EADY,2BACcT,EAAAA,GADd,oBAFM,cAEvBoC,EAFuB,yBAKtBA,EAASC,KAAKC,SALQ,gCAO7BxB,QAAQC,IAAR,MAP6B,yDAAH,qD","sources":["components/Constant/Constant.jsx","components/Trailer/Trailer.styled.js","components/Trailer/Trailer.jsx","services/api.js"],"sourcesContent":["export const IMG_PATH = 'https://image.tmdb.org/t/p/w500/';\nexport const CAST_IMG =\n  'https://feb.kuleuven.be/drc/LEER/visiting-scholars-1/image-not-available.jpg/image';\nexport const DEFAULT_IMG = 'https://europix.cc/no-poster.png';\nexport const API_KEY = '9a43726339c4236fb0854a5ef7e228c8';\n","import styled from 'styled-components';\n\nexport const Container = styled.ul`\n  margin: 0px auto;\n  padding: 0px;\n`;\n\nexport const TrailerdWrapper = styled.iframe`\n  border: none;\n`;\n\nexport const TrailertName = styled.h4`\n  padding-top: 16px;\n  padding-bottom: 16px;\n\n`;\nexport const TrailerData = styled.p`\npadding-bottom: 16px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieTrailer } from 'services/api';\nimport { Box } from '../Box';\nimport { Container,TrailertName, TrailerdWrapper,TrailerData } from './Trailer.styled';\n\n// const URL = `https://www.themoviedb.org/`;\nconst Trailer = () => {\n  const [videos, setVideos] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function fetchTrailer() {\n      try {\n        const Videos = await fetchMovieTrailer(movieId);\n        setVideos(Videos);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    fetchTrailer();\n  }, [movieId]);\n  console.log(videos);\n\n  return (\n    <Box mt=\"16px\" mb=\"26px\">\n      <Container>\n        {videos.length > 0 ? (\n          videos.slice(0, 3).map(({ id, published_at, name, key }) => {\n            return (\n              <li key={id}>\n                <TrailertName> {name}</TrailertName>\n                <TrailerData>published at: {published_at.slice(0, 10)}</TrailerData>\n\n                <TrailerdWrapper\n                  width=\"560\"\n                  height=\"315\"\n                  src={'https://www.youtube.com/embed/' + key}\n                  title=\"YouTube video player\"\n                  allowfullscreen\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                  sandbox\n                ></TrailerdWrapper>\n\n                {/* https://www.youtube.com/watch?v=_8WFzt_tKAA\n                <a\n                  href=\"https://www.youtube.com/watch?v?key={key}\"\n                  data-site={site}\n                  data-id={key}\n                  data-title={name}\n                >\n                   <div class=\"play_background\">\n                  <span class=\"glyphicons_v2 play invert svg\"></span>\n                </div>\n                </a> */}\n              </li>\n            );\n          })\n        ) : (\n          <p>There are no videos at this movie</p>\n        )}\n      </Container>\n    </Box>\n  );\n};\nexport default Trailer;\n","import axios from 'axios';\n// import { toast } from 'react-toastify';\nimport { API_KEY } from '../components/Constant/Constant';\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3/`;\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    const response = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchSearchMovies = async query => {\n  try {\n    const response = await axios.get('search/movie', {\n      params: {\n        api_key: API_KEY,\n        query: query,\n        language: 'en - US',\n        page: 1,\n        include_adult: false,\n      },\n    });\n\n    // const total = response.data.total_results;\n    // if (total === 0) {\n    //     toast.error(\n    //       'Sorry, there are no movies matching your search query. Please try again.'\n    //     );\n    //       }\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieById = async movieId => {\n  try {\n    const response = await axios.get(\n      `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieCast = async movieId => {\n  try {\n    const response = await axios.get(\n      `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data.cast;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieReviews = async movieId => {\n  try {\n    const response = await axios.get(\n      `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchMovieTrailer = async movieId => {\n  try {\n    const response = await axios.get(\n      `movie/${movieId}/videos?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"names":["IMG_PATH","CAST_IMG","DEFAULT_IMG","API_KEY","Container","styled","TrailerdWrapper","TrailertName","TrailerData","useState","videos","setVideos","movieId","useParams","useEffect","fetchMovieTrailer","Videos","console","log","fetchTrailer","Box","mt","mb","length","slice","map","id","published_at","name","key","width","height","src","title","allowfullscreen","allow","sandbox","axios","fetchTrendingMovies","response","data","results","fetchSearchMovies","query","params","api_key","language","page","include_adult","fetchMovieById","fetchMovieCast","cast","fetchMovieReviews"],"sourceRoot":""}