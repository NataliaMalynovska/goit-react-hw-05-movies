{"version":3,"file":"static/js/417.f4c8646c.chunk.js","mappings":"0SAEaA,EAAYC,EAAAA,GAAAA,GAAH,+JAQTC,EAAcD,EAAAA,GAAAA,IAAH,4LAOXE,EAAWF,EAAAA,GAAAA,GAAH,mGAMRG,EAAUH,EAAAA,GAAAA,IAAH,6H,SCyBpB,EAzCa,WACX,OAAwBI,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAYR,OAVAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAE2BC,EAAAA,EAAAA,IAAeH,GAF1C,OAEUI,EAFV,OAGIL,EAAQK,GAHZ,wGADc,uBAAC,WAAD,wBAOdC,EACD,GAAE,CAACL,IACJM,QAAQC,IAAIT,IAEV,iCACE,SAACU,EAAA,EAAD,CAAKC,GAAG,OAAOC,GAAG,OAAlB,UACE,SAAClB,EAAD,UACGM,EAAKa,OAAS,EACbb,EAAKc,MAAM,EAAG,IAAIC,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aAC5C,OACE,yBACE,UAACvB,EAAD,YACE,SAACE,EAAD,CACEsB,IAAKD,EAAeE,EAAAA,GAAWF,EAAeG,EAAAA,GAC9CC,IAAKN,KAEP,SAACpB,EAAD,UAAWoB,KACX,uCAAeC,GAAwB,wBAPlCF,EAWZ,KAED,+DAGC,MAGZ,C,gIC/CM,IAAMK,EAAW,mCACXC,EACX,qFACWE,EAAc,mCACdC,EAAU,kC,8OCAvBC,IAAAA,SAAAA,QAAA,gCAEO,IAAMC,EAAmB,mCAAG,6GAERD,IAAAA,IAAA,sCAAyCD,EAAAA,KAFjC,cAEzBG,EAFyB,yBAGxBA,EAASC,KAAKC,SAHU,gCAK/BtB,QAAQC,IAAR,MAL+B,yDAAH,qDASnBsB,EAAiB,mCAAG,WAAMC,GAAN,gGAENN,IAAAA,IAAU,eAAgB,CAC/CO,OAAQ,CACNC,QAAST,EAAAA,GACTO,MAAOA,EACPG,SAAU,UACVC,KAAM,EACNC,eAAe,KARU,cAEvBT,EAFuB,yBAkBtBA,EAASC,KAAKC,SAlBQ,gCAoB7BtB,QAAQC,IAAR,MApB6B,yDAAH,sDAwBjB6B,EAAc,mCAAG,WAAMpC,GAAN,gGAEHwB,IAAAA,IAAA,gBACZxB,EADY,oBACOuB,EAAAA,GADP,oBAFG,cAEpBG,EAFoB,yBAKnBA,EAASC,MALU,gCAO1BrB,QAAQC,IAAR,MAP0B,yDAAH,sDAWdJ,EAAc,mCAAG,WAAMH,GAAN,gGAEHwB,IAAAA,IAAA,gBACZxB,EADY,4BACeuB,EAAAA,GADf,oBAFG,cAEpBG,EAFoB,yBAKnBA,EAASC,KAAK7B,MALK,gCAO1BQ,QAAQC,IAAR,MAP0B,yDAAH,sDAWd8B,EAAiB,mCAAG,WAAMrC,GAAN,gGAENwB,IAAAA,IAAA,gBACZxB,EADY,4BACeuB,EAAAA,GADf,2BAFM,cAEvBG,EAFuB,yBAKtBA,EAASC,KAAKC,SALQ,gCAO7BtB,QAAQC,IAAR,MAP6B,yDAAH,sDAUjB+B,EAAiB,mCAAG,WAAMtC,GAAN,gGAENwB,IAAAA,IAAA,gBACZxB,EADY,2BACcuB,EAAAA,GADd,oBAFM,cAEvBG,EAFuB,yBAKtBA,EAASC,KAAKC,SALQ,gCAO7BtB,QAAQC,IAAR,MAP6B,yDAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/Constant/Constant.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(130px, 1fr));\n  gap: 12px;\n  margin: 0px auto;\n  padding: 0px;\n`;\n\nexport const CastWrapper = styled.div`\n  height: 320px;\n  border-radius: 4px;\n  box-shadow: 0px 1px 3px 0px rgb(0 0 0 / 20%), 0px 1px 1px 0px rgb(0 0 0 / 14%),\n    0px 2px 1px -1px rgb(0 0 0 / 12%);\n`;\n\nexport const CastName = styled.h4`\n  padding: 4px;\n  margin-top: 8px;\n  margin-bottom: 0;\n  color: black;\n`;\nexport const CastImg = styled.img`\n  display: block;\n  max-width: 100%;\n  height: auto;\n  object-fit: cover;\n  border-radius: 8px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from 'services/api';\nimport { Box } from '../Box';\nimport { IMG_PATH, CAST_IMG } from '../Constant/Constant.jsx';\nimport { Container, CastWrapper, CastImg, CastName } from './Cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function fetchCast() {\n      try {\n        const castInfo = await fetchMovieCast(movieId);\n        setCast(castInfo);\n      } catch (error) {}\n    }\n    fetchCast();\n  }, [movieId]);\n  console.log(cast);\n  return (\n    <>\n      <Box mt=\"16px\" mb=\"26px\">\n        <Container>\n          {cast.length > 0 ? (\n            cast.slice(0, 10).map(({ id, name, character, profile_path }) => {\n              return (\n                <li key={id}>\n                  <CastWrapper>\n                    <CastImg\n                      src={profile_path ? IMG_PATH + profile_path : CAST_IMG}\n                      alt={name}\n                    />\n                    <CastName>{name}</CastName>\n                    <p>Character: {character ? character : 'No information'}</p>\n                  </CastWrapper>\n                </li>\n              );\n            })\n          ) : (\n            <p>There are no cast at this movie</p>\n          )}\n        </Container>\n      </Box>{' '}\n    </>\n  );\n};\nexport default Cast;\n","export const IMG_PATH = 'https://image.tmdb.org/t/p/w500/';\nexport const CAST_IMG =\n  'https://feb.kuleuven.be/drc/LEER/visiting-scholars-1/image-not-available.jpg/image';\nexport const DEFAULT_IMG = 'https://europix.cc/no-poster.png';\nexport const API_KEY = '9a43726339c4236fb0854a5ef7e228c8';\n","import axios from 'axios';\n// import { toast } from 'react-toastify';\nimport { API_KEY } from '../components/Constant/Constant';\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3/`;\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    const response = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchSearchMovies = async query => {\n  try {\n    const response = await axios.get('search/movie', {\n      params: {\n        api_key: API_KEY,\n        query: query,\n        language: 'en - US',\n        page: 1,\n        include_adult: false,\n      },\n    });\n\n    // const total = response.data.total_results;\n    // if (total === 0) {\n    //     toast.error(\n    //       'Sorry, there are no movies matching your search query. Please try again.'\n    //     );\n    //       }\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieById = async movieId => {\n  try {\n    const response = await axios.get(\n      `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieCast = async movieId => {\n  try {\n    const response = await axios.get(\n      `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data.cast;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieReviews = async movieId => {\n  try {\n    const response = await axios.get(\n      `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchMovieTrailer = async movieId => {\n  try {\n    const response = await axios.get(\n      `movie/${movieId}/videos?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"names":["Container","styled","CastWrapper","CastName","CastImg","useState","cast","setCast","movieId","useParams","useEffect","fetchMovieCast","castInfo","fetchCast","console","log","Box","mt","mb","length","slice","map","id","name","character","profile_path","src","IMG_PATH","CAST_IMG","alt","DEFAULT_IMG","API_KEY","axios","fetchTrendingMovies","response","data","results","fetchSearchMovies","query","params","api_key","language","page","include_adult","fetchMovieById","fetchMovieReviews","fetchMovieTrailer"],"sourceRoot":""}